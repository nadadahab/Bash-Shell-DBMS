#!/bin/bash

#functions dbms
clear
DBMS="databases";
if [[ ! -d ./$DBMS ]];
then 
    mkdir $DBMS
fi    


function createDB {
    read -p "Enter Database Name : " dbName;
	if [[ ! -d ./$DBMS/$dbName ]];
	then 
        mkdir ./$DBMS/$dbName;
		if [[ $? == 0 ]]; 
		then
		  echo $dbName" Database Created Successfully" ;
		else	
		 echo "Error While Creating the Database" ;
		fi
	else	
	  echo "Database Already Exists";
	fi

}
function dropDB {
  read -p "Enter Database Name : " dbName;
  if [[ -d ./$DBMS/$dbName ]];
  then
      rm -r ./$DBMS/$dbName 
	  echo "Database Dropped Successfully"
  else
	  echo "Database Not found"
  fi
	 
}
function displayTable {
    read -p "Enter Database Name : " dbName;
    if [[ -d ./$DBMS/$dbName ]];
	then 
       cd ./$DBMS/$dbName
       read -p "Enter Table Name : " tableName;
	   if [[ -f $tableName ]];
	   then 
	       cat $tableName
	   else
           echo "Table Not found";      
	   fi
       cd ../..
	else
           echo "Database Not found";
	fi
}
function createTable {
    read -p "Enter Database Name : " dbName;
    if [[ -d ./$DBMS/$dbName ]];
	then 
       cd ./$DBMS/$dbName
       read -p "Enter Table Name : " tableName;
	   if [[ -f $tableName ]];
	   then 
	       echo "Table Already Exists"
	   else
           sep=":"
           newLine="\n"
           pKeyFlag="0"
           metaData="Field"$sep"Type"$sep"Key"$sep"Default"$sep"Unique"$sep"Null"
           read -p "Enter Number Of Columns : " colN;
           for((i=1;i<=colN;i++))
           {
             read -p "Enter The Name Of Column No.$i : " colName;
             echo "Type Of Column $colName : "
             select type in int str
             do
               case $type in
                   int) colType="int";break;;
                   str) colType="str";break;;
                   *) echo "Invalid Option";;
               esac
             done
             if [[ $pKeyFlag == "0" ]];
             then
                 echo "Is Column $colName a Primary Key? "
                 select pk in yes no
                 do
                   case $pk in
                       yes) 
                       pKeyFlag="1"
                       primaryKey="PK";
                       isUnique="yes";
                       acceptNull="no"
                       defaultValue=""
                       metaData+=$newLine$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
                       break;;
                       no) 
                       primaryKey="";
                       echo "Is Column $colName Unique? "
                       select unique in yes no
                       do
                         case $unique in
                             yes) isUnique="yes";break;;
                             no) isUnique="no";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       echo "Does Column $colName Accept NULL? "
                       select null in yes no
                       do
                         case $null in
                             yes) acceptNull="yes";break;;
                             no) acceptNull="no";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       echo "Does Column $colName Have a Default Value? "
                       select default in yes no
                       do
                         case $default in
                             yes) read -p "Enter The Default Value Of Column $colName : " defaultValue;break;;
                             no) defaultValue="";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       metaData+=$newLine$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
                       break;;
                       *) echo "Invalid Option";;
                   esac
                 done           
             else
             primaryKey="";
             echo "Is Column $colName Unique? "
             select unique in yes no
             do
               case $unique in
                   yes) isUnique="yes";break;;
                   no) isUnique="no";break;;
                   *) echo "Invalid Option";;
               esac
             done
             echo "Does Column $colName Accept NULL? "
             select null in yes no
             do
               case $null in
                   yes) acceptNull="yes";break;;
                   no) acceptNull="no";break;;
                   *) echo "Invalid Option";;
               esac
             done
             echo "Does Column $colName Have a Default Value? "
             select default in yes no
             do
               case $default in
                   yes) read -p "Enter The Default Value Of Column $colName : " defaultValue;break;;
                   no) defaultValue="";break;;
                   *) echo "Invalid Option";;
               esac
             done
             metaData+=$newLine$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
             fi
             if [[ $i == $colN ]]; 
             then
             columns+=$colName;
             else
             columns+=$colName$sep;
             fi
             
           }
        touch .$tableName
        echo -e $metaData  >> .$tableName
        touch $tableName
        echo -e $columns >> $tableName
        columns=""
        if [[ $? == 0 ]]
        then
          echo "Table Created Successfully"
        else
          echo "Error Creating Table $tableName"     
	    fi
       fi
        cd ../..
	else
           echo "Database Not found";
	fi
}




function alterTable {
    read -p "Enter Database Name : " dbName;
    if [[ -d ./$DBMS/$dbName ]];
	then 
       cd ./$DBMS/$dbName
       read -p "Enter Table Name : " tableName;
	   if [[ -f $tableName ]];
	   then 
	echo "1. Change Table Name"
	echo "2. Add a New Column"
	echo "3. Delete a Column" 
	echo "4. Change Data Type Of a Certain Field"
	read -p "Enter A Choice [ 1 - 4 ] " choice
    case $choice in
		1)read -p "Enter New Table Name : " newTableName;
          mv $tableName $newTableName;
          mv .$tableName .$newTableName;
          if [[ $? == 0 ]];
          then
            echo "Database Renamed Successfully"
          else
            echo "Error Renaming Database"
          fi
         ;;
        2)
           sep=":"
           colName=""
           metaData=""
           defaultFlag="0"
           nullFlag="0"
           read -p "Enter New Field Name : " colName;
             echo "Type Of Column $colName : "
             select type in int str
             do
               case $type in
                   int) colType="int";break;;
                   str) colType="str";break;;
                   *) echo "Invalid Option";;
               esac
             done
           pk=$(awk ' BEGIN{FS=":"}{if($3=="PK"){print "Primary Key Already Exists"} }' .$tableName)
          if [[ $pk ]];
          then
             primaryKey="";
             echo "Is Column $colName Unique? "
             select unique in yes no
             do
               case $unique in
                   yes) isUnique="yes";break;;
                   no) isUnique="no";break;;
                   *) echo "Invalid Option";;
               esac
             done
             echo "Does Column $colName Accept NULL? "
             select null in yes no
             do
               case $null in
                   yes) acceptNull="yes"; nullFlag="1";break;;
                   no) acceptNull="no";break;;
                   *) echo "Invalid Option";;
               esac
             done
             echo "Does Column $colName Have a Default Value? "
             select default in yes no
             do
               case $default in
                   yes) read -p "Enter The Default Value Of Column $colName : " defaultValue; defaultFlag="1";break;;
                   no) defaultValue="";break;;
                   *) echo "Invalid Option";;
               esac
             done
             metaData=$newLine$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
          else
            echo "Is Column $colName a Primary Key? "
                 select pk in yes no
                 do
                   case $pk in
                       yes) 
                       primaryKey="PK";
                       isUnique="yes";
                       acceptNull="no"
                       defaultValue=""
                       metaData=$newLine$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
                       break;;
                       no) 
                       primaryKey="";
                       echo "Is Column $colName Unique? "
                       select unique in yes no
                       do
                         case $unique in
                             yes) isUnique="yes";break;;
                             no) isUnique="no";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       echo "Does Column $colName Accept NULL? "
                       select null in yes no
                       do
                         case $null in
                             yes) acceptNull="yes"; nullFlag="1";break;;
                             no) acceptNull="no";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       echo "Does Column $colName Have a Default Value? "
                       select default in yes no
                       do
                         case $default in
                             yes) read -p "Enter The Default Value Of Column $colName : " defaultValue; defaultFlag="1";break;;
                             no) defaultValue="";break;;
                             *) echo "Invalid Option";;
                         esac
                       done
                       metaData=$colName$sep$colType$sep$primaryKey$sep$defaultValue$sep$isUnique$sep$acceptNull;
                       break;;
                       *) echo "Invalid Option";;
                   esac
                 done  
                fi
        echo -e $metaData  >> .$tableName
        firstLine=$(awk 'BEGIN{FS=":"}{if(NR==1){print $0"'$sep$colName'"}}' $tableName)
        sed -i "1s/.*/$firstLine/" $tableName
                rowsNumber=$(awk 'END{print NR}' $tableName)
              for((i=2;i<=rowsNumber;i++))
           {
             if [[ $defaultFlag == "1" ]]
             then
               line=$(awk 'BEGIN{FS=":"}{if(NR=="'$i'"){print $0"'$sep$defaultValue'"}}' $tableName)
        sed -i "${i}s/.*/$line/" $tableName
        else 
            if [[ $nullFlag == "1" ]]
             then
             line=$(awk 'BEGIN{FS=":"}{if(NR=="'$i'"){print $0"'$sep'""NULL"}}' $tableName)
        sed -i "${i}s/.*/$line/" $tableName
        else 
        line=$(awk 'BEGIN{FS=":"}{if(NR=="'$i'"){print $0"'$sep'"}}' $tableName)
        sed -i "${i}s/.*/$line/" $tableName
        fi
        fi

                
           
           }
        
        
        if [[ $? == 0 ]]
        then
          echo "Column Added Successfully"
        else
          echo "Error Adding Column $colName"     
	    fi         
        ;;
		3)

           read -p "Enter Field Name You Want to Delete : " colName;

                 colNumber=$(awk 'BEGIN{FS=":"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$colName'") print i }}}' $tableName)
      

      
                 cols=$(awk 'BEGIN{FS=":"}{if(NR==1){ print NF }}' $tableName)
                 
          if [[ $colNumber == $cols ]]
          then 

          if [[ $cols == 1 ]]

          then 

          sed -i -r 's/\S+//1' $tableName
else






           sed  -i "s/:[^:]*$//" $tableName
         fi
          
          else
                 sed  -i "s/[^:]*://${colNumber}" $tableName
          fi
       

         rowNumber=$(awk -v var="$colName" 'BEGIN{FS=":"} $0 ~ var {print NR}' .$tableName)
         if [[ $rowNumber ]]
         then
           sed -i "${rowNumber}d" .$tableName
       fi
               if [[ $? == 0 ]]
        then
          echo "Column Deleted Successfully"
        else
          echo "Error Deleting Column $colName"     
	    fi         
        ;;
    
		4)read -p "Enter Field Name You Want to Change Its Data Type : " colName;
                 rowNumber=$(awk -v var="$colName" 'BEGIN{FS=":"} $0 ~ var {print NR}' .$tableName)
        
        
        dataType=$(awk 'BEGIN{FS=":"}{if($1=="'$colName'"){print $2}}' .$tableName)
		 if [[ $dataType == 'str' ]]
	         then
              
              sed -i "${rowNumber}s/str/int/" .$tableName
              
         if [[ $? == 0 ]]
        then
          echo "Datatype is Successfully Changed From String to Int. "
        else
          echo "Error Changing Datatype For Column $colName"     
	    fi 
              
	          else
               sed -i "${rowNumber}s/int/str/" .$tableName
               
                        if [[ $? == 0 ]]
        then
          echo "Datatype is Successfully Changed From Int to String. "
        else
          echo "Error Changing Datatype For Column $colName"     
	    fi 
        fi
        
        ;;
        
		*) echo "Invalid Option";;
    esac
         
         
         
         
	   else
          echo "Table Not found";
       fi
        cd ../..
	else
           echo "Database Not found";
	fi
}
###################

function insert
{
  row=""
read -p "Enter Database Name : " dbName;
  if ! [[ -d ./$DBMS/$dbName ]];then
     echo "Database Not found";
  else
    cd ./$DBMS/$dbName
    read -p "Enter Table Name : " tableName;
    if ! [[ -f $tableName ]];then
          echo "Table $tableName doesn't exist"
    else
        colsNum=$(cat .$tableName | wc -l)
        sep=":"
        newLine="\n"

        for (( i=2; i<=$colsNum; i++))
        do
          
          name=$(awk -F ":" '{ if(NR=='$i') print $1}' .$tableName)
          ttype=$( awk -F ":" '{if(NR=='$i') print $2}' .$tableName)
          key=$( awk -F ":" '{if(NR=='$i') print $3}' .$tableName)
          default=$( awk -F ":" '{if(NR=='$i') print $4}' .$tableName)
          unique=$( awk -F ":" '{if(NR=='$i') print $5}' .$tableName)
          null=$( awk -F ":" '{if(NR=='$i') print $6}' .$tableName)
            echo -e "Enter $name ($ttype) Value: \n"         
          read input


          if [[ $null == "no" ]]; then
           while [[ true ]]; do
            if [[ $input = "" ]]; then
             echo -e "invalid input, coulmn doesn't accept null !!"
            else
             break;
            fi
            echo -e "Enter $name ($ttype) Value: \n"
            
            read input
           done
         fi

         if ! [[ $default == "" ]]; then
          if [[ $input = "" ]]; then
            input=$default
          fi  
         fi 


         if [[ $ttype == "int" ]]; then

           while ! [[ $input =~ ^[0-9]*$ ]]; do

            echo -e "invalid DataType !!"
            cd ../..
            insert
            return
           done
         fi

        if [[ $key == "PK" ]]; then
           
            if [[ $input =~ ^[`awk 'BEGIN{FS=":" ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName`]$ ]]; then
             echo -e "invalid input for Primary Key !!"
            
            cd ../..
            insert
            return
           
         fi
         fi


      if [[ $unique == "yes" ]]; then
           
            if [[ $input =~ ^[`awk 'BEGIN{FS=":" ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName`]$ ]]; then
             echo -e "enter a unique value!!"
            
            cd ../..
            insert
            return
  
         fi
         fi   



      if [[ $i == $colsNum ]]; then
       row+=$input$newLine
      else
       row+=$input$sep
      fi



        done #for end

        echo -e $row"\c" >> $tableName
       

        if [[ $? == 0 ]]
        then
         echo "Data Inserted Successfully"
        else
         echo "Error Inserting Data into Table $tableName"
        fi
  row=""
cd ../..
    fi
fi
}








function update
{

read -p "Enter Database Name : " dbName;
  if ! [[ -d ./$DBMS/$dbName ]];then
     echo "Database Not found";
  else
    cd ./$DBMS/$dbName
    read -p "Enter Table Name : " tableName;
    if ! [[ -f $tableName ]];then
          echo "Table $tableName doesn't exist"
    else
      read -p "Enter set Column name : " setv
      sf=$(awk -F ":" '{ if(NR==1) {for(i=1;i<=NF;i++){if($i=="'$setv'") print i}}}' $tableName)
      
      if [[ $sf == "" ]]
      then
        echo "Not Found"
      else
        read -p "Enter condition Column name : " cf
        cf=$(awk -F ":" '{ if(NR==1) {for(i=1;i<=NF;i++){if($i=="'$cf'") print i}}}' $tableName)
        if [[ $cf == "" ]]
        then
          echo "Not Found"
        else
          echo -e "Enter Condition Value: \c"
          read val
          res=$(awk -F ":" '{if ($'$cf'=="'$val'" && NR!=1) print $'$cf'}' $tableName)

          if [[ $res == "" ]]
          then
           echo "Value Not Found"
           
          else

          n=$(grep -n $setv .$tableName | cut -d: -f1)
          name=$(awk -F ":" '{ if(NR=='$n') print $1}' .$tableName)
          ttype=$( awk -F ":" '{if(NR=='$n') print $2}' .$tableName)
          key=$( awk -F ":" '{if(NR=='$n') print $3}' .$tableName)
          default=$( awk -F ":" '{if(NR=='$n') print $4}' .$tableName)
          unique=$( awk -F ":" '{if(NR=='$n') print $5}' .$tableName)
          null=$( awk -F ":" '{if(NR=='$n') print $6}' .$tableName)
            read -p "Enter new value : " nv;

           NR=$(awk -F ":" '{if ($'$cf'=="'$val'" && NR!=1) print NR}' $tableName)
           for it in $NR;
           do

            if [[ $null == "no" ]]; then
           while [[ true ]]; do
            if [[ $nv = "" ]]; then
             echo -e "invalid input, coulmn doesn't accept null !!"
            else
             break;
            fi
            read -p "Enter new value : " nv;
           done
         fi



         if ! [[ $default == "" ]]; then
          if [[ $nv = "" ]]; then
            nv=$default
          fi  
         fi 


         if [[ $ttype == "int" ]]; then

           while ! [[ $nv =~ ^[0-9]*$ ]]; do

            echo -e "invalid DataType !!"
            cd ../..
            update
            return
           done
         fi


        if [[ $key == "PK" ]]; then
           
            if [[ $nv =~ ^[`awk 'BEGIN{FS=":" ; ORS=" "}{if(NR != 1)print $sf}' $tableName`]$ ]]; then
             echo -e "invalid input for Primary Key !!"
            
            cd ../..
            update
           return
         fi
         fi


      if [[ $unique == "yes" ]]; then
           
            if [[ $nv =~ ^[`awk 'BEGIN{FS=":" ; ORS=" "}{if(NR != 1)print $sf}' $tableName`]$ ]]; then
             echo -e "enter a unique value!!"
            
            cd ../..
            update
            return
         fi
         fi


            oldValue=$(awk -F ":" '{if(NR=='$it'){for(i=1;i<=NF;i++){if(i=='$sf') print $i}}}' $tableName)
            sed -i ''$it's/'$oldValue'/'$nv'/g' $tableName
            echo "Row Updated Successfully"
          done

fi           
fi
fi
fi
cd ../..
fi
}










function delete
{

read -p "Enter Database Name : " dbName;
  if ! [[ -d ./$DBMS/$dbName ]];then
     echo "Database Not found";
  else
    cd ./$DBMS/$dbName
    read -p "Enter Table Name : " tableName;
    if ! [[ -f $tableName ]];then
          echo "Table $tableName doesn't exist"
    else
      read -p "Enter condition Column name : " cf
      cf=$(awk -F ":" '{ if(NR==1) {for(i=1;i<=NF;i++){if($i=="'$cf'") print i}}}' $tableName)
      if [[ $cf == "" ]]
      then
        echo "Not Found"
      else
        echo -e "Enter Condition Value: \c"
        read val
        res=$(awk -F ":" '{if ($'$cf'=="'$val'" && NR!=1) print $'$cf'}' $tableName)
        if [[ $res == "" ]]
        then
         echo "Value Not Found"
         
        else
         
         NR=$(awk -F ":" '{if ($'$cf'=="'$val'" && NR!=1) print $0}' $tableName)
        
         for it in $NR;
         do
          
         sed -i "/$it/d" $tableName 
         echo "Row Deleted Successfully"
         done
         
fi
fi
fi
cd ../..
fi
}

#################
  function sortTable {
    read -p "Enter Database Name : " dbName;
    if [[ -d ./$DBMS/$dbName ]];
	then 
        read -p "Enter Table Name : " tableName;
        
	    if [[ -f ./$DBMS/$dbName/$tableName ]];
	    then 
         cd ./$DBMS/$dbName
	     read -p "Enter Field Name that You Want Sort By It " Field
            Fieldnum=$(awk 'BEGIN{FS=":"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$Field'") print i}}}' $tableName)
if [[ $Fieldnum == "" ]]
  then
    echo "Not Found"
    cd ../..
  else
	     read -p "Enter ASC For Ascending , DESC For Descending " choice
	       dataType=$(awk 'BEGIN{FS=":"}{if($1=="'$Field'"){print $2}}' .$tableName)
          
		     if [[ $dataType == 'str' ]]
	             then
        
		      case $choice in
			    ASC)
			      sort -t: -k $Fieldnum $tableName;;
			    DESC) 
		              sort -r -t: -k $Fieldnum $tableName;;
			    *) echo "Invalid Choice"
		      esac
	              else
                      case $choice in
			    ASC)
			      sort -n -t: -k $Fieldnum  $tableName;;
			    DESC)
		              sort -nr -t: -k $Fieldnum  $tableName;;
			    *) echo "Invalid Choice"
		      esac
               fi 
		     
		    cd ../..
fi    
	    else
               echo "Table Not found";
	    fi
	else
           echo "Database Not found";
	fi

}
  
  



function dropTable {
    read -p "Enter Database Name : " dbName;
    if [[ -d ./$DBMS/$dbName ]];
	then 
       cd ./$DBMS/$dbName
       read -p "Enter Table Name : " tableName;
	   if [[ -f $tableName ]];
	   then 
	       rm $tableName .$tableName 
           if [[ $? == 0 ]]
           then
               echo "Table Dropped Successfully"
           else
               echo "Error Dropping Table $tableName"
           fi
	   else
           echo "Table Not found";      
	   fi
       cd ../..
	else
           echo "Database Not found";
	fi
}

function selectR {
	read -p "Enter Database Name : " dbName;
        if [[ -d ./$DBMS/$dbName ]];
	then 
	   cd ./$DBMS/$dbName
	   read -p "Enter Table Name : " tableName;
           if [[ -f $tableName ]];
	   then 
		echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
		echo "         S E L E C T- M E N U          "
		echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
		echo "1. Select Records Matching Word"
		echo "2. Select One Field"
		echo "3. Select More Than Field"
		echo "4. Select * From Table"
		echo "5. Exit"
		echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
		local choice
		read -p "Enter A Choice [ 1 - 4 ] " choice
		case $choice in
		1)selectRecordA;;
		2)selectRecordO;;
		3)selectRecordM;;
		4)selectT;;
		5)exit 0;; 
		*) echo "Invalid Option";;
	        esac
	   else
		echo "Table Not found";      
           fi
	   cd ../.. 
       else 
        echo "Database Not found";
       fi

}
function selectT {
	 read -p "Enter Format HTML or CSV : " format;
	 result=$(cat $tableName)
	   if [[ -z $result ]]
           then
                  echo "Not Found"
           else
			case $format in
			HTML)
			  echo "$result <br>" > "$tableName.html";;
			CSV) 
		          echo "$result" > "$tableName.csv";;
			*) echo "Invalid Choice"
		        esac
	
      fi
            
	

}


function selectRecordA {
	 read -p "Enter value that you want to search : " value;
	 read -p "Enter Format HTML or CSV : " format;
		result=$(sed -n -e'/'$value'/p' $tableName)
                if [[ -z $result ]]
                then
                  echo "Not Found"
                else
			case $format in
			HTML)
			  echo "$result <br>" > "$tableName.html";;
			CSV) 
		          echo "$result" > "$tableName.csv";;
			*) echo "Invalid Choice"
		        esac
	
                fi
            
}
function selectRecordO {
	read -p "Enter Field Name that you want select it" Field
	read -p "Enter Field Name to search in it " FieldS
        Fieldnum=$(awk 'BEGIN{FS=":"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$Field'") print i}}}' $tableName)
	FieldnumS=$(awk 'BEGIN{FS=":"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$FieldS'") print i}}}' $tableName)
 	echo $FieldnumS
	read -p "Enter Condition that you want to search : " condition
	read -p "Enter Format HTML or CSV : " format;
	      
	res=$(awk -v c="$condition" 'BEGIN{FS=":"} $"'$FieldnumS'" == c {print $'$Fieldnum'}' $tableName)
	echo $res
	if [ -z $res ]
        then
              echo "Not Found"
        else
                       case $format in
			HTML)
			  echo "$res <br>" > "$tableName.html";;
			CSV) 
		          echo "$res" > "$tableName.csv";;
			*) echo "Invalid Choice"
		        esac
	

       fi
 
}
function selectRecordM {
  read -p "Enter Fields Names that you want select it" Fields
  read -p "Enter Field Name to search in it " Field
	FieldnumS=$(awk 'BEGIN{FS=":"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$Field'") print i}}}' $tableName)
  IFS=' ' read -r -a array <<< "$Fields"
read -p "Enter condition that you want to search : " condition;
read -p "Enter Format HTML or CSV : " format;
rm $tableName.html 
for element in "${array[@]}"
do
   : 
   Fieldnum=$(awk 'BEGIN{FS=":";}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$element'") print i}}}' $tableName)

	  if [[ $Fieldnum == "" ]]
	  then
	    echo "Not Found"
	  else
		result=$(awk -v c="$condition" 'BEGIN{FS=":"} $"'$FieldnumS'" == c {print $'$Fieldnum'}' $tableName)
	
		if [[ -z $result ]]
                then
                  echo "Not Found"
                else
                   case $format in
			HTML)
			  echo "$result <br>"  >> "$tableName.html";;
			  
			CSV) 
		          echo "$result" >> "$tableName.csv";;
			*) echo "Invalid Choice"
		   esac
                fi
	   fi
 		
done
  
}



#function show menu
show_menu() {
	echo "~~~~~~~~~~~~~~~~~~~~~"	
	echo " D B M S- M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~"
        echo "1. Create Database"
	echo "2. List Datebases"
	echo "3. Drop Datebase"
	echo "4. Create Table"
	echo "5. Alter Table"
	echo "6. Add Record"
	echo "7. Edit Record"
	echo "8. Delete Record"
	echo "9. Select Records" 
  echo "10. Display A Table"
	echo "11. Sort Table"
	echo "12. Drop Table" 
	echo "13. Exit"
}

#function read
read_option(){
	local choice
	read -p "Enter A Choice [ 1 - 13 ] " choice
	case $choice in
		1)createDB;;
		2)ls $DBMS;;
		3)dropDB;;
		4)createTable;;
		5)alterTable;;
		6) insert ;;
    7) update;;
    8) delete;;
		9)selectR;;
		10)displayTable;;
		11)sortTable;;
		12)dropTable;;
		13) exit 0;;
		*) echo "Invalid Option";;
	esac
}

while true
do
 
	show_menu
	read_option
done


